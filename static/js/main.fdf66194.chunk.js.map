{"version":3,"sources":["types.ts","InputGroup.tsx","transform.ts","App.tsx","index.tsx"],"names":["InputType","InputGroup","props","className","label","size","readOnly","disabled","onChange","e","valueConsumer","target","value","inputTypeConsumer","inputTypeValue","Object","keys","filter","x","parseInt","map","name","index","transform","input","inputType","targetType","stringValue","toString","numValue","DEC","BIN","OCT","HEX","ZM","charAt","slice","length","C1","flipBits","C2","toUpperCase","includes","replace","res","substring","split","char","join","App","useState","setInput","output","setOutput","setInputType","outputType","setOutputType","handleInput","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fdf66194.chunk.js","sourcesContent":["export enum InputType {\r\n    BIN = \"BIN\",\r\n    OCT = \"OCT\",\r\n    DEC = \"DEC\",\r\n    HEX = \"HEX\",\r\n    ZM = \"ZM\",\r\n    C1 = \"C1\",\r\n    C2 = \"C2\"\r\n}\r\n\r\nexport interface InputGroupProps {\r\n    value: string;\r\n    label: string;\r\n    disabled: boolean;\r\n    inputTypeValue: string;\r\n    valueConsumer: (value: string) => void;\r\n    inputTypeConsumer: (value: string) => void;\r\n}","import React, { FC } from 'react';\r\nimport { InputGroupProps, InputType } from './types';\r\n\r\nexport const InputGroup: FC<InputGroupProps> = (props) => (\r\n    <div className=\"input_group\">\r\n        <span className=\"input_group-label\">{props.label}</span>\r\n        <input\r\n            size={30}\r\n            readOnly={props.disabled}\r\n            className=\"input_group-text\"\r\n            onChange={e => props.valueConsumer(e.target.value)}\r\n            value={props.value}\r\n        />\r\n        <select\r\n            onChange={e => props.inputTypeConsumer(e.target.value)}\r\n            value={props.inputTypeValue}\r\n        >\r\n            {Object.keys(InputType).filter(x => !(parseInt(x) >= 0)).map((name, index) =>\r\n                <option key={index} value={name}>{name}</option>)}\r\n        </select>\r\n    </div>\r\n)","import { InputType } from './types';\r\n\r\nexport const transform = (input: string | number, inputType: InputType, targetType: InputType): string | number => {\r\n    if (inputType === targetType)\r\n        return input;\r\n\r\n    let stringValue = input.toString();\r\n    let numValue = parseInt(input as string, 2);\r\n\r\n    if (inputType === InputType.DEC) {\r\n        let binValue = parseInt(input as string).toString(2);\r\n        return transform(binValue, InputType.BIN, targetType);\r\n    }\r\n\r\n    if (inputType === InputType.OCT) {\r\n        let decValue = parseInt(input as string, 8);\r\n        return transform(decValue, InputType.DEC, targetType);\r\n    }\r\n\r\n    if (inputType === InputType.HEX) {\r\n        let decValue = parseInt(input as string, 16);\r\n        return transform(decValue, InputType.DEC, targetType);\r\n    }\r\n\r\n    if (inputType === InputType.ZM && targetType === InputType.DEC) {\r\n        if (input.toString().charAt(0) === \"1\") {\r\n            return -transform(stringValue.slice(1, stringValue.length), InputType.BIN, InputType.DEC);\r\n        } else {\r\n            return transform(stringValue.slice(1, stringValue.length), InputType.BIN, InputType.DEC);\r\n        }\r\n    }\r\n\r\n    if (inputType === InputType.C1 && targetType === InputType.DEC) {\r\n        if (input.toString().charAt(0) === \"1\") {\r\n            return -transform(flipBits(stringValue).slice(1, stringValue.length), InputType.BIN, InputType.DEC);\r\n        } else {\r\n            return transform(stringValue.slice(1, stringValue.length), InputType.BIN, InputType.DEC);\r\n        }\r\n    }\r\n\r\n    if (inputType === InputType.C2 && targetType === InputType.DEC) {\r\n        if (input.toString().charAt(0) === \"1\") {\r\n            return transform(stringValue.slice(1, stringValue.length), InputType.BIN, InputType.DEC) as number - 128;\r\n        } else {\r\n            return transform(stringValue.slice(1, stringValue.length), InputType.BIN, InputType.DEC);\r\n        }\r\n    }\r\n\r\n    if (targetType === InputType.BIN) {\r\n        return input;\r\n    } else if (targetType === InputType.OCT) {\r\n        return numValue.toString(8);\r\n    } else if (targetType === InputType.DEC) {\r\n        return numValue;\r\n    } else if (targetType === InputType.HEX) {\r\n        return numValue.toString(16).toUpperCase();\r\n    } else if (targetType === InputType.ZM) {\r\n        if (input.toString().includes(\"-\")) {\r\n            return input.toString().replace(\"-\", \"1\");\r\n        } else {\r\n            return \"0\" + input;\r\n        }\r\n    } else if (targetType === InputType.C1) {\r\n        if (input.toString().includes(\"-\")) {\r\n            let res = \"1\" + flipBits(input.toString().replace(\"-\", \"\"));\r\n            while (res.length < 8) {\r\n                res = \"1\" + res;\r\n            }\r\n            return res;\r\n        } else {\r\n            let res = \"0\" + input;\r\n            while (res.length < 8) {\r\n                res = \"0\" + res;\r\n            }\r\n            return res;\r\n        }\r\n    } else if (targetType === InputType.C2) {\r\n        if((input as number) < 0) {\r\n            let baseNum = 128 + numValue;\r\n            let res = baseNum.toString(2);\r\n            while(res.length < 8) {\r\n                res = \"0\" + res;\r\n            }\r\n            return \"1\" + res.substring(1, res.length);\r\n        } else {\r\n            let res = (input as number).toString(2);\r\n            while(res.length < 8) {\r\n                res = \"0\" + res;\r\n            }\r\n            return res;\r\n        }\r\n    }\r\n    return 1;\r\n}\r\n\r\nexport const flipBits = (value: string) => {\r\n    return value.split('').map((char) => char === '0' ? '1' : '0').join('');\r\n}","import React, { useState } from 'react';\nimport './App.css';\nimport { InputGroup } from './InputGroup';\nimport { transform } from './transform';\nimport { InputType } from './types';\n\nconst App = () => {\n  const [input, setInput] = useState<string | number>(\"\");\n  const [output, setOutput] = useState<string | number>(\"\");\n  const [inputType, setInputType] = useState<InputType>(InputType.BIN);\n  const [outputType, setOutputType] = useState<InputType>(InputType.HEX);\n\n  const handleInput = (value: string) => {\n    setInput(value);\n    let res = transform(value, InputType[inputType], InputType[outputType]);\n    if (typeof res === 'string') {\n      setOutput(res.toUpperCase());\n    } else {\n      setOutput(res.toString());\n    }\n  }\n\n  const handleInputTypeChange = (value: string) => {\n    setInputType(value as InputType);\n    handleInput(input.toString());\n  }\n\n  const handleOutputTypeChange = (value: string) => {\n    setOutputType(value as InputType);\n    handleInput(input.toString());\n  }\n\n  return (\n    <div className=\"app\">\n      <InputGroup\n        value={input.toString()}\n        label={\"Input\"}\n        disabled={false}\n        inputTypeValue={inputType}\n        valueConsumer={handleInput}\n        inputTypeConsumer={handleInputTypeChange}\n      />\n      <InputGroup\n        value={output.toString()}\n        label={\"Output\"}\n        disabled={true}\n        inputTypeValue={outputType}\n        valueConsumer={setOutput}\n        inputTypeConsumer={handleOutputTypeChange}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}